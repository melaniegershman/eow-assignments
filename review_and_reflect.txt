##Command Line:
1. What is a shell? What is "bash?" 

A shell is a tool to navigate around your files. Bash is a command-line shell that lets you navigate using built-in commands.

1. In your own words, write what each of the following commands does:

`pwd` - "print working directory" shows you which directory you are currently in.

`ls` - "list directory" lists files within the directory you are currently in. Adding flags such as -a or -l will include hidden files, and provide additional information about the files, respectively.

`mv` - "move" a file or a directory elsewhere. You can also use `mv` to change a file's name.

`cd` - "change directory" move into another directory

`touch` - create a new file

`mkdir` - make a new folder (directory)

`rm` - "remove" a file or directory. You can use flags to override (-f) or enforce (-i) permissions, among other things.

`help` - "help" provides documentation about a command

`find` - "find" files

`grep` - search through a directory, including within files, for a given string

##Git:
1. What is version control and why do developers use it? Version control allows us to view the history of revisions made to files, and it allows us to merge revisions made by different users without affecting the master code.
2. What is a commit? What are the best practices for commit messages? A commit records changes to a repository with a descriptive message. A good commit message is written as an imperative statement, is concise, and explains what was done and why it was done.
3. What is a branch? A branch is a copy of a program that can be worked on without affecting the master code, and without affecting the workflow of your colleagues. You can merge your branch back into the master once it is working properly. A git workflow entails adding or staging your feature branch, and then committing it.
4. What are the 3 stages of a git change and how do you move a file from one stage to the other? After you run `git init` to initalize your git cycle, you 1) run `git status` to see if any changes have been made to your files. If they have, you need to 2) stage those files for a commit by typing `git add <FILENAME>`. Run `git status` again to ensure that the files you are trying to commit have been staged. If so, you complete the cycle by 3) running `git commit -m "message"`, in which you concisely describe what was changed. This cycle is repeated as your files continue to be updated. If you want to undo a commit, you `git revert` to undo the last commit. Note that the original commit isn't removed, but instead `git revert` provides a new commit in which the old commit is reverted, which means that the revision history stays accurate. 

##GitHub:
1. Write an explanation of and compare Git and GitHub to one another. Git is a distributed version control system which manages your source code history, while GitHub is a web-based Git repository hosting service which you can use to share your code. 
2. In your own words, write instructions to create, clone and update a repository. To create a new repository for an existing project, you copy the URL from GitHub after clicking on the "Create Repository" button. In your local project folder, you make a git folder by typing `git init`. Then, you stage your existing code by typing `git add`, and commit it by typing `git commit -m "<message>"`. Finally, you link your local project folder by typing `git remote add origin <GitHub URL>`, and push it to GitHub by typing `git push -u origin master`. To clone the repo, you must first check that the directory you are cloning to is not already a clone repo, since you cannot nest repos. Once you have confirmed that no git repo exists in the file you are cloning into, you type `git clone <copied GitHub repo URL>`. You access the URL from the GitHub repo that you want to clone. Make updates using git workflow and then push to GitHub.
3. In your own words, write instructions to fork, clone and update a repository. To fork a repository, you just click on the **fork** option on the repo you wish to copy to your own GitHub account. Then, you clone the repo by typing `git clone <copied GitHub repo URL>`. You can update your repo by following the Git workflow and pushing the new branch to GitHub. You can then request to merge with the master code in your repo on GitHub by making a pull request. Generally, someone else that is working within the same repo will confirm the merge.
4. What is a pull request and how do you create and merge one? A pull request is a way to add code to a repo without affecting the master branch. After you have made changes in a feature branch using Git workflow, you push the branch to GitHub. Then, you navigate to the repo online and click **Compare and Pull Request**. Make sure that you are requesting merge code into the correct branch, fill in the title and description of your pull request, and click **Create Pull Request**. Your pull request will be merged by at least one other person on your team, and the feature branch will be deleted to maintain an organized repo.
5. Why are pull requests preferred when working with teams? Pull requests are preferred because they allow for code to be reviewed by other team members prior to merging to the master code. This ensures that human error is prevented and allows for your team to proofread and make sure that the code to be merged works as intended. 

[Here is a link to access this file on GitHub](https://github.com/melaniegershman/eow-assignments/blob/master/review_and_reflect.txt) 

